
( defwidget ram []
  
  (box :class "container" 
       :orientation "v"
    (circular-progress :value {EWW_RAM.used_mem_perc} :class "ram" :thickness 3)
    (label :text "" :xalign 0.42 )
  )
)

( defwidget volume []
  (box :class "container" 
       :orientation "v"
    (box 
      :orientation "v"
      (circular-progress :value {EWW_RAM.used_mem_perc} :class "audio" :thickness 3)
      (label :text "󰕾" :xalign 0.5)
    )
    (box :orientation "v"
      (circular-progress :value {EWW_RAM.used_mem_perc} :class "audio" :thickness 3)
      (label :text "" :xalign 0.5)
    )
  )
)

( defwidget battery []

  (box
    :class "container"
    :orientation "v"
    (circular-progress :value {EWW_BATTERY.BAT0.capacity} 
                       :thickness 3
      )
    (label :text " " 
           :xalign 0.6
      )
    
  )
)
(defwidget stats [] 
  (box 
       :class "wrapperWidget"
       :orientation "v"
       :space-evenly false
       :valign "end"
    ( ram )
    ( volume )
    ( battery )
  )
)

(defpoll time
  :interval "10s"
  :initial "00:00"
  "date '+%H\\n%M'"
  )

(defwidget clock []
  (box
    (label :text time)
  )
)




(deflisten music :initial ""
  "playerctl --player=%any,firefox --follow metadata --format '{{ artist }} - {{ title }}' || true"
)

(deflisten playing :initial ""
  "playerctl --player=%any,firefox --follow status")

(deflisten occupiedWorkspaces :initial "[]" "scripts/get-workspaces")
(deflisten current_workspace :initial "1" "scripts/get-active-workspaces")
(defwidget workspaces []
  (eventbox :onscroll "bash ./scripts/change-active-workspace {} ${current_workspace}" 
    (box :space-evenly false  :orientation "v" :class "wrapperWidget"
      (label :text "${occupiedWorkspaces}${current_workspace}" :visible false)
      (for workspace in occupiedWorkspaces
        
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
          (box :class "workspace-entry ${workspace.id == current_workspace ? "workspaceFocused" : "workspaceUnfocused"} ${workspace.windows > 0 ? "occupied" : "empty"}"
               :visible {workspace.windows > 0 || workspace.id == current_workspace}
            (label :text "${workspace.id}")
            )
          )
        )
      )
    )
  )

;; (deflisten workspace "scripts/get-workspaces")
;;
;; (defwidget workspaces []
;;            (literal
;;             :content workspace))

(defwidget musicStatus []
  (revealer :class "music"
       :orientation "v"
       :space-evenly false
       :halign "center"
       ;; :visible {playing == "Playing"}
       :reveal {playing == "Playing"}
       :transition "crossfade"
       ;; :duration "2000ms"
    {music != "" ? "${music}" : ""}))


(defwidget bar []
      (box :class "bar" 
         :orientation "v"
               
      (box :valign "start" (workspaces))
      (box :valign "center" :class "wrapperWidget"
        (clock)
        
      )
      (box  :class "wrapperWidget" :valign "end" (stats))
            
    )
)
(defwindow bar0 
           :monitor 0
           :geometry (geometry :x "0%"
                               :y "0%"
                               ;width "3%"
                               :height "98%"
                               :anchor "left center")
           :stacking "fg"
           :focusable false
           :exclusive true
           :namespace "bar"
  (bar)
)

(defwindow bar1 
           :monitor 1
           :geometry (geometry :x "0%"
                               :y "0%"
                               ;width "3%"
                               :height "98%"
                               :anchor "left center")
           :stacking "fg"
           :focusable false
           :exclusive true
           :namespace "bar"
  (bar)
)

(defwindow bar2
           :monitor 2
           :geometry (geometry :x "0%"
                               :y "0%"
                               ;width "3%"
                               :height "98%"
                               :anchor "left center")
           :stacking "fg"
           :focusable false
           :exclusive true
           :namespace "bar"
  (bar)
)
